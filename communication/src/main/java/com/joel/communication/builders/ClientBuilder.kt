package com.joel.communication.builders

import com.joel.communication.alias.Header
import com.joel.communication.alias.Headers
import com.joel.communication.annotations.CommunicationsMarker
import com.joel.communication.client.Client
import com.joel.communication.enums.HttpHeader
import com.joel.communication.exceptions.CommunicationsException

/**
 * The builder to construct a client http
 *
 */
@CommunicationsMarker
class ClientBuilder private constructor() {

    companion object {
        @Volatile private var thisInstance: ClientBuilder? = null

        val instance = thisInstance ?: synchronized(this) {
            ClientBuilder().also { thisInstance = it }
        }
    }

    internal val headers: Headers = mutableListOf()
    internal val timeoutBuilder = TimeoutBuilder()

    internal val logBuilder = LogBuilder()

    init {
        val defaultHeaders = listOf(
            //Header(HttpHeader.ACCEPT_ENCODING, "compress;q=0.5, gzip;q=0.1"),
            Header(HttpHeader.CONTENT_TYPE, "application/x-www-form-urlencoded"),
            Header(HttpHeader.ACCEPT, "application/json")
        )

       defaultHeaders.forEach {
           headers.add(it)
       }
    }

    /**
     * The base url of the request.
     * Should not be empty.
     */
    var baseUrl: String = ""

    /**
     * Authorization header to to send in the http request for all calls.
     *
     * @param token The token generated by the api server.
     * @param prefix That is used to the header. Default is 'Bearer'.
     */
    fun authorization(token: String?, prefix: String = "Bearer") {
        if (hasHeader(HttpHeader.AUTHORIZATION).not()) {
            val header = Header(HttpHeader.AUTHORIZATION, "$prefix $token")
            headers.add(header)
        }
    }

    /**
     * The language that will be used in the server to get the response for all calls.
     *
     * @param languageCode Should have 2 characters only.
     * If you already sent the language, this will be ignored.
     */
    fun language(languageCode: String) {
        if (languageCode.length > 2 || languageCode.length < 2)
            throw CommunicationsException("Language code must contains only 2 characters")

        if (hasHeader(HttpHeader.ACCEPT_LANGUAGE).not()) {
            val header = Header(HttpHeader.ACCEPT_LANGUAGE, languageCode)
            headers.add(header)
        }
    }

    /**
     * The [Header] object to send in the http request for all calls.
     *
     * @param header The header to send.
     */
    fun header(header: Header) {
        headers.add(header)
    }

    /**
     * Call this function to have access to the [TimeoutBuilder] and handle timeout times.
     *
     */
    fun timeout(builder: TimeoutBuilder. () -> Unit) {
        timeoutBuilder.also(builder)
    }

    /**
     * Call this function to have access to the [LogBuilder] and handle request logs.
     *
     */
    fun logs(builder: LogBuilder. () -> Unit) {
        logBuilder.also(builder)
    }

    internal fun build(): Client {
        val client = Client.instance
        client.baseUrl = baseUrl
        client.builder = this
        return client
    }

    private fun hasHeader(key: HttpHeader) = headers.find { it.first == key } != null
}